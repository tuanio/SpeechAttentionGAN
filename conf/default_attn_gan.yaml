networks:
  simple_downsample:
    n_blocks: 3
    kernel_sizes: [7, 3, 3]
    strides: [1, 2, 2]
    paddings: [0, 1, 1]
    dilations: [1, 1, 1]

  simple_upsample:
    n_blocks: 3
    kernel_sizes: [3, 3, [10, 7]]
    strides: [2, 2, 1]
    paddings: [1, 1, 0]
    output_padding: [1, 1, 0]

feature:
  stft_params:
    n_fft: 256
    win_length: 256
    hop_length: 64
    power: null
  istft_params:
    n_fft: 256
    win_length: 256
    hop_length: 64

dm:
  root_path: /home/stud_vantuan/data/data_pickle_gan/helicopter_1h_30m
  split: [train, test, valid]
  batch_size: 4
  num_workers: 1
  pin_memory: true
  persistent_workers: true
  dataset:
    domains: [clean, noisy]
    src_domain: clean
    # img_size: [129, 128]

model:
  generator:
    downsample_name: simple
    bottle_neck_name: resnet
    upsample_name: simple
    downsample_params:
      in_channels: 2 # with mask
      hidden_channels: 64
      channel_expand: 2
      n_blocks: ${networks.simple_downsample.n_blocks}
      kernel_sizes: ${networks.simple_downsample.kernel_sizes}
      strides: ${networks.simple_downsample.strides}
      paddings: ${networks.simple_downsample.paddings}
      dilations: ${networks.simple_downsample.dilations}
    bottle_neck_params:
      n_blocks: 9
      kernel_size: 3
      stride: 1
      padding: 1
    upsample_content_params:
      out_channels: 9 # (1x (n-1): n-1 is number of mask)
      channel_expand: ${model.generator.downsample_params.channel_expand}
      n_blocks: ${networks.simple_upsample.n_blocks}
      kernel_sizes: ${networks.simple_upsample.kernel_sizes}
      strides: ${networks.simple_upsample.strides}
      paddings: ${networks.simple_upsample.paddings}
      output_padding: ${networks.simple_upsample.output_padding}
    upsample_attn_params:
      out_channels: 10
      channel_expand: ${model.generator.downsample_params.channel_expand}
      n_blocks: ${networks.simple_upsample.n_blocks}
      kernel_sizes: ${networks.simple_upsample.kernel_sizes}
      strides: ${networks.simple_upsample.strides}
      paddings: ${networks.simple_upsample.paddings}
      output_padding: ${networks.simple_upsample.output_padding}
  discriminator:
    in_channels: 2
    hidden_channels: 64
    n_layers: 3
    kernel_sizes: [3, 4, 4, 4, 5]
    strides: [2, 2, 1, 1, 1]
    padding: 1
    channel_expand: 2
    leakyrelu_slope: 0.2
  optimizer:
    name: adam
    grad_clip: 5
    params:
      lr: 0.0001
      betas: [0.5, 0.999]
  scheduler:
    name: none
  mask: # set to zero to remove
    freq_masks: 2
    freq_width: 20
    time_masks: 2
    time_width: 20
  weight:
    lambda_cycle_A: 1
    lambda_cycle_B: 1
    lambda_idt: 1

logger:
  wandb:
    have: false
    params:
      project: speech_attn_gan_helicopter
      name: speech_attn_gan_1

trainer:
  devices: 4
  max_epochs: 50
  log_every_n_steps: 2

exp:
  train: true
  test: false
  predict: false